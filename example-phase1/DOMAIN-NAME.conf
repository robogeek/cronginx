server {
    listen 80;
    listen [::]:80;

    server_name  www.DOMAIN-NAME;
    return 301 http://DOMAIN-NAME$request_uri;
}


server {
    listen 80;
    listen [::]:80;

    # Here put the domain name the server is to be known as.
    server_name  DOMAIN-NAME;
    access_log   /var/log/DOMAIN-NAME.access.log  main;
    error_log   /var/log/DOMAIN-NAME.error.log  debug;

    # This is for handling the ACME challenge.  Substitute the
    # domain name here.
    location /.well-known/ {
       root /webroots/DOMAIN-NAME/;
    }

    # Use this for a static HTML site, specifically the default
    # site supplied with the default Nginx container
    location / {
        root   /usr/share/nginx/html;
        index  index.html index.htm;
    }

    # Use this to proxy to Socket.IO service on the back-end service
    # The reason is that Socket.IO requires upgrading the
    # HTTP/1.1 connection to WebSocket.
    # See:
    # https://stackoverflow.com/questions/29043879/socket-io-with-nginx
#    location ^~ /socket.io/ {
#
#        proxy_set_header X-Real-IP $remote_addr;
#        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
#        proxy_set_header Host $http_host;
#        proxy_set_header X-NginX-Proxy false;
#
#        proxy_pass http://backend-service:3000;
#        proxy_redirect off;
#
#        proxy_http_version 1.1;
#        proxy_set_header Upgrade $http_upgrade;
#        proxy_set_header Connection "upgrade";
#    }

    # Use this for proxying to a backend service
    # The HTTPS session is terminated at this Proxy.
    # The back end service will see a simple HTTP service.
#    location / {
#        proxy_set_header X-Real-IP $remote_addr;
#        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
#        proxy_set_header X-NginX-Proxy true;
#        proxy_pass http://backend-service:4080/;
#        proxy_set_header Host $http_host;
#        proxy_cache_bypass $http_upgrade;
#        proxy_redirect off;
#    }


}